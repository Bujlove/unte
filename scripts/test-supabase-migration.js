const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = 'https://ghluoqegmbeqpatatkes.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdobHVvcWVnbWJlcXBhdGF0a2VzIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MTcxODU0MiwiZXhwIjoyMDc3Mjk0NTQyfQ.BBVLhG_l-sEs3gw_wgEyqKvz9E_sIxqIzjKkgvsAwOs'

const supabase = createClient(supabaseUrl, supabaseKey)

async function testSupabaseMigration() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –≤ Supabase...')
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ resumes
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ resumes...')
    
    const { data: columns, error: columnsError } = await supabase
      .from('resumes')
      .select('id, file_hash, processing_status, processing_started_at, processing_completed_at, processing_error, processing_steps, file_metadata')
      .limit(1)
    
    if (columnsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–æ–∫:', columnsError)
      return { success: false, error: '–ö–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' }
    } else {
      console.log('‚úÖ –ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã')
    }

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é update_processing_status
    console.log('2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é update_processing_status...')
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const { data: testResume, error: createError } = await supabase
      .from('resumes')
      .insert({
        file_name: 'test-migration.pdf',
        file_size: 1024,
        mime_type: 'application/pdf',
        file_hash: 'test-hash-' + Date.now(),
        processing_status: 'pending',
        processing_steps: [],
        file_metadata: { test: true },
        status: 'processing'
      })
      .select()
      .single()
    
    if (createError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', createError)
      return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å' }
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', testResume.id)

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const { error: updateError } = await supabase.rpc('update_processing_status', {
      resume_id: testResume.id,
      status: 'processing',
      step_name: 'test_step',
      error_message: null
    })
    
    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ update_processing_status:', updateError)
    } else {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è update_processing_status —Ä–∞–±–æ—Ç–∞–µ—Ç')
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_processing_stats
    console.log('3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_processing_stats...')
    
    const { data: stats, error: statsError } = await supabase.rpc('get_processing_stats')
    
    if (statsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_processing_stats:', statsError)
    } else {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è get_processing_stats —Ä–∞–±–æ—Ç–∞–µ—Ç:', stats)
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ file_processing_monitor
    console.log('4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ file_processing_monitor...')
    
    const { data: monitor, error: monitorError } = await supabase
      .from('file_processing_monitor')
      .select('*')
      .limit(5)
    
    if (monitorError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è file_processing_monitor:', monitorError)
    } else {
      console.log('‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ file_processing_monitor —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', monitor.length)
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã...')
    
    // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ file_hash
    const { data: hashSearch, error: hashError } = await supabase
      .from('resumes')
      .select('id, file_hash')
      .eq('file_hash', testResume.file_hash)
    
    if (hashError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ file_hash:', hashError)
    } else {
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å file_hash —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', hashSearch.length)
    }

    // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ processing_status
    const { data: statusSearch, error: statusError } = await supabase
      .from('resumes')
      .select('id, processing_status')
      .eq('processing_status', 'processing')
    
    if (statusError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ processing_status:', statusError)
    } else {
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å processing_status —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', statusSearch.length)
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API upload-with-progress
    console.log('6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API upload-with-progress...')
    
    const testFile = new Blob(['Test resume content for migration testing'], { type: 'text/plain' })
    const formData = new FormData()
    formData.append('file', testFile, 'test-migration.txt')
    formData.append('consent', 'true')
    
    try {
      const response = await fetch('https://unte.vercel.app/api/resumes/upload-with-progress', {
        method: 'POST',
        body: formData
      })
      
      const result = await response.json()
      
      if (result.success) {
        console.log('‚úÖ API upload-with-progress —Ä–∞–±–æ—Ç–∞–µ—Ç')
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
          resumeId: result.resumeId,
          processing: result.processing,
          tracking: result.tracking
        })
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å—Ç–∞—Ç—É—Å–∞
        const statusResponse = await fetch(`https://unte.vercel.app/api/resumes/processing-status/${result.resumeId}`)
        const statusResult = await statusResponse.json()
        
        if (statusResult.success) {
          console.log('‚úÖ API processing-status —Ä–∞–±–æ—Ç–∞–µ—Ç')
        } else {
          console.log('‚ö†Ô∏è API processing-status –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', statusResult.error)
        }
        
      } else {
        console.log('‚ö†Ô∏è API upload-with-progress –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.error)
      }
    } catch (apiError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', apiError.message)
    }

    // 7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('7. –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...')
    
    await supabase
      .from('resumes')
      .delete()
      .eq('id', testResume.id)
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã')

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:')
    console.log('- –ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: ‚úÖ')
    console.log('- –§—É–Ω–∫—Ü–∏—è update_processing_status: ‚úÖ')
    console.log('- –§—É–Ω–∫—Ü–∏—è get_processing_stats: ‚úÖ')
    console.log('- –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ file_processing_monitor: ‚úÖ')
    console.log('- –ò–Ω–¥–µ–∫—Å—ã: ‚úÖ')
    console.log('- API upload-with-progress: ‚úÖ')
    
    return {
      success: true,
      message: '–í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      stats: stats
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–π:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

testSupabaseMigration()
