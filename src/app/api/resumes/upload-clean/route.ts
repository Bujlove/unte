import { NextRequest, NextResponse } from "next/server";
import { createAdminClient } from "@/lib/supabase/server";
import { extractTextFromFile } from "@/lib/storage/file-parser";
import { parseResumeTextImproved } from "@/lib/improved-parser";

export async function POST(request: NextRequest) {
  if (process.env.NODE_ENV === 'production') {
    return NextResponse.json({ error: 'Not available' }, { status: 404 });
  }
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —á–∏—Å—Ç—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—é–º–µ...");
    
    const formData = await request.formData();
    const file = formData.get("file") as File;
    const consent = formData.get("consent") as string;

    if (!file) {
      return NextResponse.json({
        success: false,
        error: "–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
      }, { status: 400 });
    }

    if (consent !== "true") {
      return NextResponse.json({
        success: false,
        error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const allowedTypes = [
      'application/pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/msword',
      'text/plain'
    ];

    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json({
        success: false,
        error: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: PDF, DOCX, DOC, TXT"
      }, { status: 400 });
    }

    if (file.size > 10 * 1024 * 1024) { // 10MB
      return NextResponse.json({
        success: false,
        error: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB"
      }, { status: 400 });
    }

    const supabase = await createAdminClient();
    const buffer = Buffer.from(await file.arrayBuffer());

    // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—é–º–µ
    console.log("üìù –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—é–º–µ...");
    const { data: resume, error: createError } = await supabase
      .from("resumes")
      .insert({
        file_name: file.name,
        file_size: file.size,
        mime_type: file.type,
        status: 'processing',
        consent_given: true,
        expires_at: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toISOString() // 180 –¥–Ω–µ–π
      })
      .select()
      .single();

    if (createError || !resume) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:", createError);
      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ–∑—é–º–µ",
        details: createError?.message
      }, { status: 500 });
    }

    console.log(`‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: ${resume.id}`);

    // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    console.log("üìñ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...");
    let text: string;
    try {
      text = await extractTextFromFile(buffer, file.type, file.name);
      
      if (!text || text.length < 10) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞");
      }

      console.log(`‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    } catch (textError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:", textError);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
      await supabase
        .from("resumes")
        .update({ 
          status: 'failed',
          processing_error: textError instanceof Error ? textError.message : 'Unknown error'
        })
        .eq('id', resume.id);

      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞",
        details: textError instanceof Error ? textError.message : 'Unknown error'
      }, { status: 400 });
    }

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    console.log("üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª...");
    let fileUrl: string;
    try {
      const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_');
      const fileName = `${resume.id}-${sanitizedFileName}`;
      
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from("resumes")
        .upload(fileName, buffer, {
          contentType: file.type,
          upsert: false,
        });

      if (uploadError) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadError.message}`);
      }

      fileUrl = supabase.storage.from("resumes").getPublicUrl(fileName).data.publicUrl;
      console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${fileUrl}`);
    } catch (storageError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", storageError);
      
      await supabase
        .from("resumes")
        .update({ 
          status: 'failed',
          processing_error: storageError instanceof Error ? storageError.message : 'Storage error'
        })
        .eq('id', resume.id);

      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª",
        details: storageError instanceof Error ? storageError.message : 'Storage error'
      }, { status: 500 });
    }

    // 4. –ü–∞—Ä—Å–∏–º —Ä–µ–∑—é–º–µ —Å AI
    console.log("ü§ñ –ü–∞—Ä—Å–∏–º —Ä–µ–∑—é–º–µ...");
    let parsedData;
    try {
      parsedData = await parseResumeTextImproved(text);
      console.log("‚úÖ AI –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
    } catch (aiError) {
      console.warn("‚ö†Ô∏è AI –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ");
      
      // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const emailMatch = text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
      const phoneMatch = text.match(/(\+?[0-9\s\-\(\)]{10,})/);
      const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
      
      parsedData = {
        personal: {
          fullName: lines[0] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          email: emailMatch ? emailMatch[1] : undefined,
          phone: phoneMatch ? phoneMatch[1] : undefined,
          location: undefined,
          birthDate: undefined,
          photo: undefined
        },
        professional: {
          title: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          summary: text.substring(0, 200) + '...',
          totalExperience: 0,
          skills: {
            technical: [],
            soft: [],
            languages: []
          }
        },
        experience: [],
        education: [],
        languages: [],
        additional: {
          achievements: [],
          certifications: [],
          projects: []
        }
      };
    }

    // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—é–º–µ
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...");
    try {
      await supabase
        .from("resumes")
        .update({
          file_url: fileUrl,
          full_name: parsedData.personal.fullName,
          email: parsedData.personal.email,
          phone: parsedData.personal.phone,
          location: parsedData.personal.location,
          parsed_data: parsedData,
          experience_years: parsedData.professional.totalExperience,
          last_position: parsedData.professional.title,
          education_level: undefined,
          skills: [],
          languages: [],
          summary: parsedData.professional.summary,
          status: 'completed',
          quality_score: 0.8
        })
        .eq('id', resume.id);

      // 6. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ-—Å—É–º–º—É
      console.log("üìã –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ-—Å—É–º–º—É...");
      await supabase
        .from("resume_summaries")
        .insert({
          resume_id: resume.id,
          quick_id: `RS-${Date.now()}`,
          full_name: parsedData.personal.fullName,
          email: parsedData.personal.email,
          phone: parsedData.personal.phone,
          location: parsedData.personal.location,
          current_position: parsedData.professional.title,
          experience_years: parsedData.professional.totalExperience,
          education_level: undefined,
          skills: [],
          languages: [],
          summary: parsedData.professional.summary,
          quality_score: 0.8,
          consent_given: true,
          expires_at: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toISOString()
        });

      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");

      return NextResponse.json({
        success: true,
        message: "–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
        resumeId: resume.id,
        fileName: file.name,
        textLength: text.length,
        textPreview: text.substring(0, 200) + '...',
        fileUrl: fileUrl,
        parsedData: {
          fullName: parsedData.personal.fullName,
          email: parsedData.personal.email,
          phone: parsedData.personal.phone,
          position: parsedData.professional.title,
          experience: parsedData.professional.totalExperience,
          skills: []
        }
      });

    } catch (saveError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", saveError);
      
      await supabase
        .from("resumes")
        .update({ 
          status: 'failed',
          processing_error: saveError instanceof Error ? saveError.message : 'Save error'
        })
        .eq('id', resume.id);

      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        details: saveError instanceof Error ? saveError.message : 'Save error'
      }, { status: 500 });
    }

  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
