import { NextRequest, NextResponse } from "next/server";
import { createAdminClient } from "@/lib/supabase/server";
import { validateFileSize, validateFileType, extractTextFromFile } from "@/lib/storage/file-parser";
import { parseResumeTextImproved, createSafeResumeData, createSafeSummaryData } from "@/lib/improved-parser";

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—é–º–µ...");
    
    const formData = await request.formData();
    const file = formData.get("file") as File;
    const consentGiven = formData.get("consent") === "true";

    if (!file) {
      return NextResponse.json({ 
        success: false,
        error: "–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" 
      }, { status: 400 });
    }

    if (!consentGiven) {
      return NextResponse.json({
        success: false,
        error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"
      }, { status: 400 });
    }

    console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${file.name}, —Ç–∏–ø: ${file.type}, —Ä–∞–∑–º–µ—Ä: ${file.size}`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (!validateFileSize(file.size)) {
      return NextResponse.json({ 
        success: false,
        error: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)" 
      }, { status: 400 });
    }

    if (!validateFileType(file.type, file.name)) {
      return NextResponse.json({
        success: false,
        error: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, DOCX, DOC, TXT"
      }, { status: 400 });
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ buffer
    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    console.log("üìñ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞...");
    const text = await extractTextFromFile(buffer, file.type, file.name);

    if (!text || text.length < 50) {
      return NextResponse.json({
        success: false,
        error: "–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
      }, { status: 400 });
    }

    console.log(`‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –¥–ª–∏–Ω–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º
    console.log("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º AI –ø–∞—Ä—Å–∏–Ω–≥...");
    const parsedData = await parseResumeTextImproved(text);
    console.log("‚úÖ AI –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const supabase = await createAdminClient();
    
    if (parsedData.personal.email || parsedData.personal.phone) {
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...");
      
      const { data: existingResume } = await supabase
        .from("resumes")
        .select("id, upload_token")
        .or(`email.eq.${parsedData.personal.email},phone.eq.${parsedData.personal.phone}`)
        .limit(1);

      if (existingResume && existingResume.length > 0) {
        console.log("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Ä–µ–∑—é–º–µ");
        return NextResponse.json({
          success: true,
          isUpdate: true,
          resumeId: existingResume[0].id,
          uploadToken: existingResume[0].upload_token,
          message: "–†–µ–∑—é–º–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ."
        });
      }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage
    console.log("üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...");
    const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_');
    const fileName = `${Date.now()}-${sanitizedFileName}`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from("resumes")
      .upload(fileName, buffer, {
        contentType: file.type,
        upsert: false,
      });

    if (uploadError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", uploadError);
      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
        details: uploadError.message
      });
    }

    const fileUrl = supabase.storage.from("resumes").getPublicUrl(fileName).data.publicUrl;
    console.log("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ");

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–∑—ã
    console.log("üõ°Ô∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã...");
    const resumeData = createSafeResumeData(parsedData, {
      fileName: file.name,
      fileSize: file.size,
      mimeType: file.type,
      fileUrl: fileUrl
    });

    // –í—Å—Ç–∞–≤–∫–∞ —Ä–µ–∑—é–º–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...");
    const { data: resume, error: insertError } = await supabase
      .from("resumes")
      .insert(resumeData)
      .select()
      .single();

    if (insertError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ:", insertError);
      return NextResponse.json({ 
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
        details: insertError.message
      });
    }

    console.log("‚úÖ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    console.log("üìä –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—é–º–µ...");
    const summaryData = createSafeSummaryData(parsedData, resume.id);
    
    const { error: summaryError } = await supabase
      .from("resume_summaries")
      .insert(summaryData);

    if (summaryError) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏:", summaryError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–≤–æ–¥–∫–∏
    } else {
      console.log("‚úÖ –°–≤–æ–¥–∫–∞ —Ä–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–∞");
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = {
      success: true,
      resumeId: resume.id,
      uploadToken: resumeData.upload_token,
      message: "–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
      summary: {
        fullName: parsedData.personal.fullName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        position: parsedData.professional.title || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        company: parsedData.experience?.[0]?.company || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        experience: parsedData.professional.totalExperience || 0,
        skills: parsedData.professional.skills.hard?.slice(0, 5) || [],
        location: parsedData.personal.location || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        qualityScore: resumeData.quality_score
      },
      stats: {
        textLength: text.length,
        skillsCount: parsedData.professional.skills.hard?.length || 0,
        experienceCount: parsedData.experience?.length || 0,
        educationCount: parsedData.education?.length || 0,
        languagesCount: parsedData.languages?.length || 0
      }
    };

    console.log("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    return NextResponse.json(result);

  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ",
      stack: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.stack : undefined) : undefined
    }, { status: 500 });
  }
}
