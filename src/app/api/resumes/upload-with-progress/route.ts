import { NextRequest, NextResponse } from "next/server";
import { createAdminClient } from "@/lib/supabase/server";
import { validateFileSize, validateFileType, extractTextFromFile } from "@/lib/storage/file-parser";
import { parseResumeTextImproved, createSafeResumeData, createSafeSummaryData } from "@/lib/improved-parser";
import crypto from "crypto";

interface ProcessingStep {
  step: string;
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  timestamp: string;
  duration?: number;
  error?: string;
}

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  let resumeId: string | null = null;
  
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—é–º–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º...");
    
    const formData = await request.formData();
    const file = formData.get("file") as File;
    const consentGiven = formData.get("consent") === "true";

    if (!file) {
      return NextResponse.json({ 
        success: false,
        error: "–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" 
      }, { status: 400 });
    }

    if (!consentGiven) {
      return NextResponse.json({
        success: false,
        error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"
      }, { status: 400 });
    }

    console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${file.name}, —Ç–∏–ø: ${file.type}, —Ä–∞–∑–º–µ—Ä: ${file.size}`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (!validateFileSize(file.size)) {
      return NextResponse.json({ 
        success: false,
        error: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)" 
      }, { status: 400 });
    }

    if (!validateFileType(file.type, file.name)) {
      return NextResponse.json({
        success: false,
        error: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, DOCX, DOC, TXT"
      }, { status: 400 });
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ buffer
    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const fileHash = crypto.createHash('md5').update(buffer).digest('hex');
    console.log(`üîë –•–µ—à —Ñ–∞–π–ª–∞: ${fileHash}`);

    const supabase = await createAdminClient();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ö–µ—à—É
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ö–µ—à—É —Ñ–∞–π–ª–∞...");
    const { data: existingResume } = await supabase
      .from("resumes")
      .select("id, upload_token, processing_status, full_name, current_position")
      .eq("file_hash", fileHash)
      .single();

    if (existingResume) {
      console.log("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ —Ö–µ—à—É");
      return NextResponse.json({
        success: true,
        isUpdate: true,
        resumeId: existingResume.id,
        uploadToken: existingResume.upload_token,
        message: "–§–∞–π–ª —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ",
        summary: {
          fullName: existingResume.full_name,
          position: existingResume.current_position,
          status: existingResume.processing_status
        }
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—é–º–µ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    console.log("üíæ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—é–º–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    const { data: resume, error: createError } = await supabase
      .from("resumes")
      .insert({
        file_name: file.name,
        file_size: file.size,
        mime_type: file.type,
        file_hash: fileHash,
        processing_status: 'pending',
        processing_steps: [],
        file_metadata: {
          original_name: file.name,
          upload_timestamp: new Date().toISOString(),
          user_agent: request.headers.get('user-agent'),
          content_type: file.type
        },
        status: 'processing',
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (createError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—é–º–µ:", createError);
      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ–∑—é–º–µ",
        details: createError.message
      });
    }

    resumeId = resume.id;
    console.log(`‚úÖ –ó–∞–ø–∏—Å—å —Ä–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–∞: ${resumeId}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–±—Ä–∞–±–æ—Ç–∫–∞"
    if (resumeId) {
      await updateProcessingStatus(supabase, resumeId, 'processing', 'file_validation');
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    console.log("üìñ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞...");
    const textStartTime = Date.now();
    
    try {
      const text = await extractTextFromFile(buffer, file.type, file.name);
      
      if (!text || text.length < 50) {
        throw new Error("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
      }

      console.log(`‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –¥–ª–∏–Ω–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      if (resumeId) {
        await updateProcessingStatus(supabase, resumeId, 'processing', 'text_extraction');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—Å—Ç–µ
      await supabase
        .from("resumes")
        .update({
          file_metadata: {
            text_length: text.length,
            text_preview: text.substring(0, 200),
            extraction_time: Date.now() - textStartTime
          }
        })
        .eq('id', resumeId);

    } catch (textError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:", textError);
      if (resumeId) {
        await updateProcessingStatus(supabase, resumeId, 'failed', 'text_extraction', textError.message);
      }
      
      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞",
        details: textError instanceof Error ? textError.message : 'Unknown error'
      });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage
    console.log("üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...");
    const storageStartTime = Date.now();
    
    try {
      const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_');
      const fileName = `${resumeId}-${sanitizedFileName}`;
      
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from("resumes")
        .upload(fileName, buffer, {
          contentType: file.type,
          upsert: false,
        });

      if (uploadError) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${uploadError.message}`);
      }

      const fileUrl = supabase.storage.from("resumes").getPublicUrl(fileName).data.publicUrl;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å URL —Ñ–∞–π–ª–∞
      await supabase
        .from("resumes")
        .update({
          file_url: fileUrl,
          file_metadata: {
            storage_path: uploadData.path,
            storage_upload_time: Date.now() - storageStartTime
          }
        })
        .eq('id', resumeId);

      console.log("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ");
      if (resumeId) {
        await updateProcessingStatus(supabase, resumeId, 'processing', 'file_storage');
      }

    } catch (storageError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", storageError);
        if (resumeId) {
          await updateProcessingStatus(supabase, resumeId, 'failed', 'file_storage', storageError.message);
        }
      
      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
        details: storageError instanceof Error ? storageError.message : 'Unknown error'
      });
    }

    // AI –ø–∞—Ä—Å–∏–Ω–≥ —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
    console.log("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º AI –ø–∞—Ä—Å–∏–Ω–≥...");
    const parsingStartTime = Date.now();
    
    let parsedData;
    let parsingMethod = 'ai';
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π AI –ø–∞—Ä—Å–µ—Ä
      parsedData = await parseResumeTextImproved(text);
      console.log("‚úÖ AI –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
      if (resumeId) {
        await updateProcessingStatus(supabase, resumeId, 'processing', 'ai_parsing');
      }
      
    } catch (aiError) {
      console.warn("‚ö†Ô∏è AI –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:", aiError);
      
      // Fallback: –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      parsedData = await extractBasicInfo(text);
      parsingMethod = 'fallback';
      
      console.log("‚úÖ Fallback –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
      if (resumeId) {
        await updateProcessingStatus(supabase, resumeId, 'processing', 'fallback_parsing');
      }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–∑—ã
    console.log("üõ°Ô∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã...");
    const dataPrepStartTime = Date.now();
    
    try {
      const resumeData = createSafeResumeData(parsedData, {
        fileName: file.name,
        fileSize: file.size,
        mimeType: file.type,
        fileUrl: fileUrl
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—é–º–µ —Å –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await supabase
        .from("resumes")
        .update({
          ...resumeData,
          processing_status: 'processing',
          file_metadata: {
            ...resumeData.file_metadata,
            parsing_method: parsingMethod,
            parsing_time: Date.now() - parsingStartTime,
            data_prep_time: Date.now() - dataPrepStartTime
          }
        })
        .eq('id', resumeId);

      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
      if (resumeId) {
        await updateProcessingStatus(supabase, resumeId, 'processing', 'data_preparation');
      }

    } catch (dataError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", dataError);
        if (resumeId) {
          await updateProcessingStatus(supabase, resumeId, 'failed', 'data_preparation', dataError.message);
        }
      
      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        details: dataError instanceof Error ? dataError.message : 'Unknown error'
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    console.log("üìä –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—é–º–µ...");
    const summaryStartTime = Date.now();
    
    try {
      const summaryData = createSafeSummaryData(parsedData, resumeId);
      
      const { error: summaryError } = await supabase
        .from("resume_summaries")
        .insert(summaryData);

      if (summaryError) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏:", summaryError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–≤–æ–¥–∫–∏
      } else {
        console.log("‚úÖ –°–≤–æ–¥–∫–∞ —Ä–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–∞");
      }

      if (resumeId) {
        await updateProcessingStatus(supabase, resumeId, 'processing', 'summary_creation');
      }

    } catch (summaryError) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏:", summaryError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–≤–æ–¥–∫–∏
    }

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    const totalTime = Date.now() - startTime;
    await supabase
      .from("resumes")
      .update({
        processing_status: 'completed',
        processing_completed_at: new Date().toISOString(),
        status: 'active',
        file_metadata: {
          total_processing_time: totalTime,
          parsing_method: parsingMethod
        }
      })
      .eq('id', resumeId);

    console.log("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = {
      success: true,
      resumeId: resumeId,
      uploadToken: resumeData.upload_token,
      message: "–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
      processing: {
        method: parsingMethod,
        totalTime: totalTime,
        steps: [
          { name: "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞", status: "completed" },
          { name: "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", status: "completed" },
          { name: "–ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", status: "completed" },
          { name: "AI –ø–∞—Ä—Å–∏–Ω–≥", status: parsingMethod === 'ai' ? "completed" : "failed" },
          { name: "Fallback –ø–∞—Ä—Å–∏–Ω–≥", status: parsingMethod === 'fallback' ? "completed" : "skipped" },
          { name: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", status: "completed" },
          { name: "–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏", status: "completed" }
        ]
      },
      summary: {
        fullName: parsedData.personal.fullName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        position: parsedData.professional.title || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        company: parsedData.experience?.[0]?.company || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        experience: parsedData.professional.totalExperience || 0,
        skills: parsedData.professional.skills.hard?.slice(0, 5) || [],
        location: parsedData.personal.location || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        qualityScore: resumeData.quality_score
      },
      stats: {
        textLength: text.length,
        skillsCount: parsedData.professional.skills.hard?.length || 0,
        experienceCount: parsedData.experience?.length || 0,
        educationCount: parsedData.education?.length || 0,
        languagesCount: parsedData.languages?.length || 0
      },
      tracking: {
        fileHash: fileHash,
        fileUrl: fileUrl,
        processingId: resumeId
      }
    };

    return NextResponse.json(result);

  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ:", error);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—à–∏–±–∫–∞" –µ—Å–ª–∏ –µ—Å—Ç—å resumeId
    if (resumeId) {
      try {
        if (resumeId) {
          await updateProcessingStatus(supabase, resumeId, 'failed', 'critical_error', error.message);
        }
      } catch (updateError) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:", updateError);
      }
    }
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ",
      stack: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.stack : undefined) : undefined,
      tracking: {
        resumeId: resumeId,
        processingTime: Date.now() - startTime
      }
    }, { status: 500 });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function updateProcessingStatus(supabase: any, resumeId: string, status: string, step: string, error?: string) {
  try {
    await supabase.rpc('update_processing_status', {
      resume_id: resumeId,
      status: status,
      step_name: step,
      error_message: error
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
  }
}

// Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async function extractBasicInfo(text: string) {
  // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ AI
  const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email
  const emailMatch = text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
  const email = emailMatch ? emailMatch[1] : null;
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phoneMatch = text.match(/(\+?[0-9\s\-\(\)]{10,})/);
  const phone = phoneMatch ? phoneMatch[1] : null;
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –∏–∑ email)
  let fullName = lines[0] || '';
  if (email && !fullName) {
    fullName = email.split('@')[0].replace(/[._]/g, ' ');
  }
  
  return {
    personal: {
      fullName: fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      email: email,
      phone: phone,
      location: null,
      birthDate: null,
      photo: null
    },
    professional: {
      title: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      summary: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
      totalExperience: 0,
      skills: {
        hard: [],
        soft: [],
        tools: []
      }
    },
    experience: [],
    education: [],
    languages: [],
    additional: {
      certifications: [],
      publications: [],
      projects: [],
      awards: [],
      interests: []
    }
  };
}
